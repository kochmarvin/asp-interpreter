//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/marvinkoch/Desktop/Desktop - Marvinâ€™s MacBook Pro/asp-interpreter/Interpreter.Lib/ANTLR/Lparse.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class LparseParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NAF=1, NUMBER=2, ID=3, VARIABLE=4, ANONYMOUS_VARIABLE=5, DOT=6, COMMA=7, 
		QUERY_MARK=8, COLON=9, SEMICOLON=10, OR=11, CONS=12, PLUS=13, MINUS=14, 
		TIMES=15, DIV=16, AT=17, PAREN_OPEN=18, PAREN_CLOSE=19, SQUARE_OPEN=20, 
		SQUARE_CLOSE=21, CURLY_OPEN=22, CURLY_CLOSE=23, EQUAL=24, UNEQUAL=25, 
		LESS=26, GREATER=27, LESS_OR_EQ=28, GREATER_OR_EQ=29, COMMENT=30, WS=31;
	public const int
		RULE_program = 0, RULE_statements = 1, RULE_query = 2, RULE_statement = 3, 
		RULE_head = 4, RULE_body = 5, RULE_disjunction = 6, RULE_choice = 7, RULE_choice_elements = 8, 
		RULE_choice_element = 9, RULE_aggregate = 10, RULE_aggregate_elements = 11, 
		RULE_aggregate_element = 12, RULE_naf_literals = 13, RULE_naf_literal = 14, 
		RULE_classical_literal = 15, RULE_builtin_atom = 16, RULE_binop = 17, 
		RULE_terms = 18, RULE_term = 19, RULE_arithop = 20;
	public static readonly string[] ruleNames = {
		"program", "statements", "query", "statement", "head", "body", "disjunction", 
		"choice", "choice_elements", "choice_element", "aggregate", "aggregate_elements", 
		"aggregate_element", "naf_literals", "naf_literal", "classical_literal", 
		"builtin_atom", "binop", "terms", "term", "arithop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'not'", null, null, null, "'_'", "'.'", "','", "'?'", "':'", "';'", 
		"'|'", "':-'", "'+'", "'-'", "'*'", "'/'", "'@'", "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "'='", null, "'<'", "'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NAF", "NUMBER", "ID", "VARIABLE", "ANONYMOUS_VARIABLE", "DOT", 
		"COMMA", "QUERY_MARK", "COLON", "SEMICOLON", "OR", "CONS", "PLUS", "MINUS", 
		"TIMES", "DIV", "AT", "PAREN_OPEN", "PAREN_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE", 
		"CURLY_OPEN", "CURLY_CLOSE", "EQUAL", "UNEQUAL", "LESS", "GREATER", "LESS_OR_EQ", 
		"GREATER_OR_EQ", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lparse.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LparseParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LparseParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LparseParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				statements();
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID || _la==MINUS) {
					{
					State = 43;
					query();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				query();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_statements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			statement();
			State = 53;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 50;
					statement();
					}
					} 
				}
				State = 55;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext classical_literal() {
			return GetRuleContext<Classical_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_MARK() { return GetToken(LparseParser.QUERY_MARK, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 4, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			classical_literal();
			State = 57;
			Match(QUERY_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONS() { return GetToken(LparseParser.CONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LparseParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeadContext head() {
			return GetRuleContext<HeadContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		int _la;
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				Match(CONS);
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4472894L) != 0)) {
					{
					State = 60;
					body();
					}
				}

				State = 63;
				Match(DOT);
				}
				break;
			case NUMBER:
			case ID:
			case VARIABLE:
			case ANONYMOUS_VARIABLE:
			case MINUS:
			case PAREN_OPEN:
			case CURLY_OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64;
				head();
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONS) {
					{
					State = 65;
					Match(CONS);
					}
				}

				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4472894L) != 0)) {
					{
					State = 68;
					body();
					}
				}

				State = 71;
				Match(DOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionContext disjunction() {
			return GetRuleContext<DisjunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChoiceContext choice() {
			return GetRuleContext<ChoiceContext>(0);
		}
		public HeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_head; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadContext head() {
		HeadContext _localctx = new HeadContext(Context, State);
		EnterRule(_localctx, 8, RULE_head);
		try {
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				disjunction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76;
				choice();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext[] naf_literal() {
			return GetRuleContexts<Naf_literalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext naf_literal(int i) {
			return GetRuleContext<Naf_literalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggregateContext[] aggregate() {
			return GetRuleContexts<AggregateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggregateContext aggregate(int i) {
			return GetRuleContext<AggregateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LparseParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LparseParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAF() { return GetTokens(LparseParser.NAF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAF(int i) {
			return GetToken(LparseParser.NAF, i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 79;
				naf_literal();
				}
				break;
			case 2:
				{
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAF) {
					{
					State = 80;
					Match(NAF);
					}
				}

				State = 83;
				aggregate();
				}
				break;
			}
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 86;
				Match(COMMA);
				State = 92;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 87;
					naf_literal();
					}
					break;
				case 2:
					{
					State = 89;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NAF) {
						{
						State = 88;
						Match(NAF);
						}
					}

					State = 91;
					aggregate();
					}
					break;
				}
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext[] classical_literal() {
			return GetRuleContexts<Classical_literalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext classical_literal(int i) {
			return GetRuleContext<Classical_literalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(LparseParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(LparseParser.OR, i);
		}
		public DisjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisjunctionContext disjunction() {
		DisjunctionContext _localctx = new DisjunctionContext(Context, State);
		EnterRule(_localctx, 12, RULE_disjunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			classical_literal();
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 100;
				Match(OR);
				State = 101;
				classical_literal();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChoiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_OPEN() { return GetToken(LparseParser.CURLY_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_CLOSE() { return GetToken(LparseParser.CURLY_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinopContext[] binop() {
			return GetRuleContexts<BinopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinopContext binop(int i) {
			return GetRuleContext<BinopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Choice_elementsContext choice_elements() {
			return GetRuleContext<Choice_elementsContext>(0);
		}
		public ChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChoiceContext choice() {
		ChoiceContext _localctx = new ChoiceContext(Context, State);
		EnterRule(_localctx, 14, RULE_choice);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 278588L) != 0)) {
				{
				State = 107;
				term(0);
				State = 108;
				binop();
				}
			}

			State = 112;
			Match(CURLY_OPEN);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID || _la==MINUS) {
				{
				State = 113;
				choice_elements();
				}
			}

			State = 116;
			Match(CURLY_CLOSE);
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1056964608L) != 0)) {
				{
				State = 117;
				binop();
				State = 118;
				term(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Choice_elementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Choice_elementContext[] choice_element() {
			return GetRuleContexts<Choice_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Choice_elementContext choice_element(int i) {
			return GetRuleContext<Choice_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(LparseParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(LparseParser.SEMICOLON, i);
		}
		public Choice_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice_elements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterChoice_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitChoice_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Choice_elementsContext choice_elements() {
		Choice_elementsContext _localctx = new Choice_elementsContext(Context, State);
		EnterRule(_localctx, 16, RULE_choice_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			choice_element();
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 123;
				Match(SEMICOLON);
				State = 124;
				choice_element();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Choice_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext classical_literal() {
			return GetRuleContext<Classical_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LparseParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalsContext naf_literals() {
			return GetRuleContext<Naf_literalsContext>(0);
		}
		public Choice_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterChoice_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitChoice_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Choice_elementContext choice_element() {
		Choice_elementContext _localctx = new Choice_elementContext(Context, State);
		EnterRule(_localctx, 18, RULE_choice_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			classical_literal();
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 131;
				Match(COLON);
				State = 132;
				naf_literals();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_OPEN() { return GetToken(LparseParser.CURLY_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_elementsContext aggregate_elements() {
			return GetRuleContext<Aggregate_elementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_CLOSE() { return GetToken(LparseParser.CURLY_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinopContext[] binop() {
			return GetRuleContexts<BinopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinopContext binop(int i) {
			return GetRuleContext<BinopContext>(i);
		}
		public AggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterAggregate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitAggregate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateContext aggregate() {
		AggregateContext _localctx = new AggregateContext(Context, State);
		EnterRule(_localctx, 20, RULE_aggregate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 278588L) != 0)) {
				{
				State = 135;
				term(0);
				State = 136;
				binop();
				}
			}

			State = 140;
			Match(CURLY_OPEN);
			State = 141;
			aggregate_elements();
			State = 142;
			Match(CURLY_CLOSE);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1056964608L) != 0)) {
				{
				State = 143;
				binop();
				State = 144;
				term(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_elementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_elementContext[] aggregate_element() {
			return GetRuleContexts<Aggregate_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_elementContext aggregate_element(int i) {
			return GetRuleContext<Aggregate_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(LparseParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(LparseParser.SEMICOLON, i);
		}
		public Aggregate_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_elements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterAggregate_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitAggregate_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_elementsContext aggregate_elements() {
		Aggregate_elementsContext _localctx = new Aggregate_elementsContext(Context, State);
		EnterRule(_localctx, 22, RULE_aggregate_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			aggregate_element();
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 149;
				Match(SEMICOLON);
				State = 150;
				aggregate_element();
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LparseParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalsContext naf_literals() {
			return GetRuleContext<Naf_literalsContext>(0);
		}
		public Aggregate_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterAggregate_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitAggregate_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_elementContext aggregate_element() {
		Aggregate_elementContext _localctx = new Aggregate_elementContext(Context, State);
		EnterRule(_localctx, 24, RULE_aggregate_element);
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 156;
				terms();
				State = 157;
				Match(COLON);
				State = 158;
				naf_literals();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160;
				terms();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 161;
				Match(COLON);
				State = 162;
				naf_literals();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Naf_literalsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext[] naf_literal() {
			return GetRuleContexts<Naf_literalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext naf_literal(int i) {
			return GetRuleContext<Naf_literalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LparseParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LparseParser.COMMA, i);
		}
		public Naf_literalsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naf_literals; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterNaf_literals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitNaf_literals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNaf_literals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Naf_literalsContext naf_literals() {
		Naf_literalsContext _localctx = new Naf_literalsContext(Context, State);
		EnterRule(_localctx, 26, RULE_naf_literals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			naf_literal();
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 166;
				Match(COMMA);
				State = 167;
				naf_literal();
				}
				}
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Naf_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext classical_literal() {
			return GetRuleContext<Classical_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAF() { return GetToken(LparseParser.NAF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_atomContext builtin_atom() {
			return GetRuleContext<Builtin_atomContext>(0);
		}
		public Naf_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naf_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterNaf_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitNaf_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNaf_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Naf_literalContext naf_literal() {
		Naf_literalContext _localctx = new Naf_literalContext(Context, State);
		EnterRule(_localctx, 28, RULE_naf_literal);
		int _la;
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAF) {
					{
					State = 173;
					Match(NAF);
					}
				}

				State = 176;
				classical_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				builtin_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Classical_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LparseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(LparseParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(LparseParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public Classical_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classical_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterClassical_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitClassical_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassical_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Classical_literalContext classical_literal() {
		Classical_literalContext _localctx = new Classical_literalContext(Context, State);
		EnterRule(_localctx, 30, RULE_classical_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 180;
				Match(MINUS);
				}
			}

			State = 183;
			Match(ID);
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 184;
				Match(PAREN_OPEN);
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 278588L) != 0)) {
					{
					State = 185;
					terms();
					}
				}

				State = 188;
				Match(PAREN_CLOSE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Builtin_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinopContext binop() {
			return GetRuleContext<BinopContext>(0);
		}
		public Builtin_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtin_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterBuiltin_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitBuiltin_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Builtin_atomContext builtin_atom() {
		Builtin_atomContext _localctx = new Builtin_atomContext(Context, State);
		EnterRule(_localctx, 32, RULE_builtin_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			term(0);
			State = 192;
			binop();
			State = 193;
			term(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(LparseParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNEQUAL() { return GetToken(LparseParser.UNEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(LparseParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(LparseParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQ() { return GetToken(LparseParser.LESS_OR_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQ() { return GetToken(LparseParser.GREATER_OR_EQ, 0); }
		public BinopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterBinop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitBinop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinopContext binop() {
		BinopContext _localctx = new BinopContext(Context, State);
		EnterRule(_localctx, 34, RULE_binop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1056964608L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LparseParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LparseParser.COMMA, i);
		}
		public TermsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterTerms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitTerms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermsContext terms() {
		TermsContext _localctx = new TermsContext(Context, State);
		EnterRule(_localctx, 36, RULE_terms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			term(0);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 198;
				Match(COMMA);
				State = 199;
				term(0);
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LparseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(LparseParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(LparseParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LparseParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(LparseParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANONYMOUS_VARIABLE() { return GetToken(LparseParser.ANONYMOUS_VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithopContext arithop() {
			return GetRuleContext<ArithopContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 206;
				Match(ID);
				State = 211;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 207;
					Match(PAREN_OPEN);
					State = 208;
					terms();
					State = 209;
					Match(PAREN_CLOSE);
					}
					break;
				}
				}
				break;
			case NUMBER:
				{
				State = 213;
				Match(NUMBER);
				}
				break;
			case VARIABLE:
				{
				State = 214;
				Match(VARIABLE);
				}
				break;
			case ANONYMOUS_VARIABLE:
				{
				State = 215;
				Match(ANONYMOUS_VARIABLE);
				}
				break;
			case PAREN_OPEN:
				{
				State = 216;
				Match(PAREN_OPEN);
				State = 217;
				term(0);
				State = 218;
				Match(PAREN_CLOSE);
				}
				break;
			case MINUS:
				{
				State = 220;
				Match(MINUS);
				State = 221;
				term(2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 230;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TermContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 224;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 225;
					arithop();
					State = 226;
					term(2);
					}
					} 
				}
				State = 232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArithopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LparseParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(LparseParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LparseParser.DIV, 0); }
		public ArithopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterArithop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitArithop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithopContext arithop() {
		ArithopContext _localctx = new ArithopContext(Context, State);
		EnterRule(_localctx, 40, RULE_arithop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 122880L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,31,236,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,0,3,
		0,45,8,0,1,0,3,0,48,8,0,1,1,1,1,5,1,52,8,1,10,1,12,1,55,9,1,1,2,1,2,1,
		2,1,3,1,3,3,3,62,8,3,1,3,1,3,1,3,3,3,67,8,3,1,3,3,3,70,8,3,1,3,1,3,3,3,
		74,8,3,1,4,1,4,3,4,78,8,4,1,5,1,5,3,5,82,8,5,1,5,3,5,85,8,5,1,5,1,5,1,
		5,3,5,90,8,5,1,5,3,5,93,8,5,5,5,95,8,5,10,5,12,5,98,9,5,1,6,1,6,1,6,5,
		6,103,8,6,10,6,12,6,106,9,6,1,7,1,7,1,7,3,7,111,8,7,1,7,1,7,3,7,115,8,
		7,1,7,1,7,1,7,1,7,3,7,121,8,7,1,8,1,8,1,8,5,8,126,8,8,10,8,12,8,129,9,
		8,1,9,1,9,1,9,3,9,134,8,9,1,10,1,10,1,10,3,10,139,8,10,1,10,1,10,1,10,
		1,10,1,10,1,10,3,10,147,8,10,1,11,1,11,1,11,5,11,152,8,11,10,11,12,11,
		155,9,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,164,8,12,1,13,1,13,1,
		13,5,13,169,8,13,10,13,12,13,172,9,13,1,14,3,14,175,8,14,1,14,1,14,3,14,
		179,8,14,1,15,3,15,182,8,15,1,15,1,15,1,15,3,15,187,8,15,1,15,3,15,190,
		8,15,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,5,18,201,8,18,10,18,
		12,18,204,9,18,1,19,1,19,1,19,1,19,1,19,1,19,3,19,212,8,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,223,8,19,1,19,1,19,1,19,1,19,5,19,
		229,8,19,10,19,12,19,232,9,19,1,20,1,20,1,20,0,1,38,21,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,40,0,2,1,0,24,29,1,0,13,16,252,
		0,47,1,0,0,0,2,49,1,0,0,0,4,56,1,0,0,0,6,73,1,0,0,0,8,77,1,0,0,0,10,84,
		1,0,0,0,12,99,1,0,0,0,14,110,1,0,0,0,16,122,1,0,0,0,18,130,1,0,0,0,20,
		138,1,0,0,0,22,148,1,0,0,0,24,163,1,0,0,0,26,165,1,0,0,0,28,178,1,0,0,
		0,30,181,1,0,0,0,32,191,1,0,0,0,34,195,1,0,0,0,36,197,1,0,0,0,38,222,1,
		0,0,0,40,233,1,0,0,0,42,44,3,2,1,0,43,45,3,4,2,0,44,43,1,0,0,0,44,45,1,
		0,0,0,45,48,1,0,0,0,46,48,3,4,2,0,47,42,1,0,0,0,47,46,1,0,0,0,48,1,1,0,
		0,0,49,53,3,6,3,0,50,52,3,6,3,0,51,50,1,0,0,0,52,55,1,0,0,0,53,51,1,0,
		0,0,53,54,1,0,0,0,54,3,1,0,0,0,55,53,1,0,0,0,56,57,3,30,15,0,57,58,5,8,
		0,0,58,5,1,0,0,0,59,61,5,12,0,0,60,62,3,10,5,0,61,60,1,0,0,0,61,62,1,0,
		0,0,62,63,1,0,0,0,63,74,5,6,0,0,64,66,3,8,4,0,65,67,5,12,0,0,66,65,1,0,
		0,0,66,67,1,0,0,0,67,69,1,0,0,0,68,70,3,10,5,0,69,68,1,0,0,0,69,70,1,0,
		0,0,70,71,1,0,0,0,71,72,5,6,0,0,72,74,1,0,0,0,73,59,1,0,0,0,73,64,1,0,
		0,0,74,7,1,0,0,0,75,78,3,12,6,0,76,78,3,14,7,0,77,75,1,0,0,0,77,76,1,0,
		0,0,78,9,1,0,0,0,79,85,3,28,14,0,80,82,5,1,0,0,81,80,1,0,0,0,81,82,1,0,
		0,0,82,83,1,0,0,0,83,85,3,20,10,0,84,79,1,0,0,0,84,81,1,0,0,0,85,96,1,
		0,0,0,86,92,5,7,0,0,87,93,3,28,14,0,88,90,5,1,0,0,89,88,1,0,0,0,89,90,
		1,0,0,0,90,91,1,0,0,0,91,93,3,20,10,0,92,87,1,0,0,0,92,89,1,0,0,0,93,95,
		1,0,0,0,94,86,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,11,
		1,0,0,0,98,96,1,0,0,0,99,104,3,30,15,0,100,101,5,11,0,0,101,103,3,30,15,
		0,102,100,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,
		13,1,0,0,0,106,104,1,0,0,0,107,108,3,38,19,0,108,109,3,34,17,0,109,111,
		1,0,0,0,110,107,1,0,0,0,110,111,1,0,0,0,111,112,1,0,0,0,112,114,5,22,0,
		0,113,115,3,16,8,0,114,113,1,0,0,0,114,115,1,0,0,0,115,116,1,0,0,0,116,
		120,5,23,0,0,117,118,3,34,17,0,118,119,3,38,19,0,119,121,1,0,0,0,120,117,
		1,0,0,0,120,121,1,0,0,0,121,15,1,0,0,0,122,127,3,18,9,0,123,124,5,10,0,
		0,124,126,3,18,9,0,125,123,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,
		128,1,0,0,0,128,17,1,0,0,0,129,127,1,0,0,0,130,133,3,30,15,0,131,132,5,
		9,0,0,132,134,3,26,13,0,133,131,1,0,0,0,133,134,1,0,0,0,134,19,1,0,0,0,
		135,136,3,38,19,0,136,137,3,34,17,0,137,139,1,0,0,0,138,135,1,0,0,0,138,
		139,1,0,0,0,139,140,1,0,0,0,140,141,5,22,0,0,141,142,3,22,11,0,142,146,
		5,23,0,0,143,144,3,34,17,0,144,145,3,38,19,0,145,147,1,0,0,0,146,143,1,
		0,0,0,146,147,1,0,0,0,147,21,1,0,0,0,148,153,3,24,12,0,149,150,5,10,0,
		0,150,152,3,24,12,0,151,149,1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,
		154,1,0,0,0,154,23,1,0,0,0,155,153,1,0,0,0,156,157,3,36,18,0,157,158,5,
		9,0,0,158,159,3,26,13,0,159,164,1,0,0,0,160,164,3,36,18,0,161,162,5,9,
		0,0,162,164,3,26,13,0,163,156,1,0,0,0,163,160,1,0,0,0,163,161,1,0,0,0,
		164,25,1,0,0,0,165,170,3,28,14,0,166,167,5,7,0,0,167,169,3,28,14,0,168,
		166,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,27,1,0,
		0,0,172,170,1,0,0,0,173,175,5,1,0,0,174,173,1,0,0,0,174,175,1,0,0,0,175,
		176,1,0,0,0,176,179,3,30,15,0,177,179,3,32,16,0,178,174,1,0,0,0,178,177,
		1,0,0,0,179,29,1,0,0,0,180,182,5,14,0,0,181,180,1,0,0,0,181,182,1,0,0,
		0,182,183,1,0,0,0,183,189,5,3,0,0,184,186,5,18,0,0,185,187,3,36,18,0,186,
		185,1,0,0,0,186,187,1,0,0,0,187,188,1,0,0,0,188,190,5,19,0,0,189,184,1,
		0,0,0,189,190,1,0,0,0,190,31,1,0,0,0,191,192,3,38,19,0,192,193,3,34,17,
		0,193,194,3,38,19,0,194,33,1,0,0,0,195,196,7,0,0,0,196,35,1,0,0,0,197,
		202,3,38,19,0,198,199,5,7,0,0,199,201,3,38,19,0,200,198,1,0,0,0,201,204,
		1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,37,1,0,0,0,204,202,1,0,0,0,
		205,206,6,19,-1,0,206,211,5,3,0,0,207,208,5,18,0,0,208,209,3,36,18,0,209,
		210,5,19,0,0,210,212,1,0,0,0,211,207,1,0,0,0,211,212,1,0,0,0,212,223,1,
		0,0,0,213,223,5,2,0,0,214,223,5,4,0,0,215,223,5,5,0,0,216,217,5,18,0,0,
		217,218,3,38,19,0,218,219,5,19,0,0,219,223,1,0,0,0,220,221,5,14,0,0,221,
		223,3,38,19,2,222,205,1,0,0,0,222,213,1,0,0,0,222,214,1,0,0,0,222,215,
		1,0,0,0,222,216,1,0,0,0,222,220,1,0,0,0,223,230,1,0,0,0,224,225,10,1,0,
		0,225,226,3,40,20,0,226,227,3,38,19,2,227,229,1,0,0,0,228,224,1,0,0,0,
		229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,39,1,0,0,0,232,230,
		1,0,0,0,233,234,7,1,0,0,234,41,1,0,0,0,33,44,47,53,61,66,69,73,77,81,84,
		89,92,96,104,110,114,120,127,133,138,146,153,163,170,174,178,181,186,189,
		202,211,222,230
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
