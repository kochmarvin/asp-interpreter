//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Lparse.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class LparseParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NAF=1, IS=2, NUMBER=3, ID=4, VARIABLE=5, DOT=6, DOTDOT=7, COMMA=8, QUERY_MARK=9, 
		COLON=10, SEMICOLON=11, CONS=12, PLUS=13, MINUS=14, TIMES=15, DIV=16, 
		PAREN_OPEN=17, PAREN_CLOSE=18, SQUARE_OPEN=19, SQUARE_CLOSE=20, CURLY_OPEN=21, 
		CURLY_CLOSE=22, UNIFICATION=23, EQUAL=24, UNEQUAL=25, LESS=26, GREATER=27, 
		LESS_OR_EQ=28, GREATER_OR_EQ=29, LINE_COMMENT=30, WS=31;
	public const int
		RULE_program = 0, RULE_statements = 1, RULE_query = 2, RULE_statement = 3, 
		RULE_bodies = 4, RULE_head = 5, RULE_body = 6, RULE_disjunction = 7, RULE_range = 8, 
		RULE_choice = 9, RULE_choice_elements = 10, RULE_choice_element = 11, 
		RULE_naf_literal = 12, RULE_classical_literal = 13, RULE_range_literal = 14, 
		RULE_range_binding = 15, RULE_range_number = 16, RULE_builtin_atom = 17, 
		RULE_is_operator = 18, RULE_operand = 19, RULE_binop = 20, RULE_terms = 21, 
		RULE_term = 22, RULE_arithop = 23;
	public static readonly string[] ruleNames = {
		"program", "statements", "query", "statement", "bodies", "head", "body", 
		"disjunction", "range", "choice", "choice_elements", "choice_element", 
		"naf_literal", "classical_literal", "range_literal", "range_binding", 
		"range_number", "builtin_atom", "is_operator", "operand", "binop", "terms", 
		"term", "arithop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'not'", "'is'", null, null, null, "'.'", "'..'", "','", "'?'", 
		"':'", "';'", "':-'", "'+'", "'-'", "'*'", "'/'", "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "'='", "'=='", null, "'<'", "'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NAF", "IS", "NUMBER", "ID", "VARIABLE", "DOT", "DOTDOT", "COMMA", 
		"QUERY_MARK", "COLON", "SEMICOLON", "CONS", "PLUS", "MINUS", "TIMES", 
		"DIV", "PAREN_OPEN", "PAREN_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE", "CURLY_OPEN", 
		"CURLY_CLOSE", "UNIFICATION", "EQUAL", "UNEQUAL", "LESS", "GREATER", "LESS_OR_EQ", 
		"GREATER_OR_EQ", "LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lparse.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LparseParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LparseParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LparseParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				statements();
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 147514L) != 0)) {
					{
					State = 49;
					query();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52;
				query();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_statements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			statement();
			State = 59;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 56;
					statement();
					}
					} 
				}
				State = 61;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext[] body() {
			return GetRuleContexts<BodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body(int i) {
			return GetRuleContext<BodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_MARK() { return GetToken(LparseParser.QUERY_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(LparseParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(LparseParser.SEMICOLON, i);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 4, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			body();
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 63;
				Match(SEMICOLON);
				State = 64;
				body();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 70;
			Match(QUERY_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONS() { return GetToken(LparseParser.CONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LparseParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodiesContext bodies() {
			return GetRuleContext<BodiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeadContext head() {
			return GetRuleContext<HeadContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		int _la;
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				Match(CONS);
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 147514L) != 0)) {
					{
					State = 73;
					bodies();
					}
				}

				State = 76;
				Match(DOT);
				}
				break;
			case ID:
			case MINUS:
			case CURLY_OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77;
				head();
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONS) {
					{
					State = 78;
					Match(CONS);
					}
				}

				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 147514L) != 0)) {
					{
					State = 81;
					bodies();
					}
				}

				State = 84;
				Match(DOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext[] body() {
			return GetRuleContexts<BodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body(int i) {
			return GetRuleContext<BodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(LparseParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(LparseParser.SEMICOLON, i);
		}
		public BodiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bodies; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterBodies(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitBodies(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBodies(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodiesContext bodies() {
		BodiesContext _localctx = new BodiesContext(Context, State);
		EnterRule(_localctx, 8, RULE_bodies);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			body();
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 89;
				Match(SEMICOLON);
				State = 90;
				body();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionContext disjunction() {
			return GetRuleContext<DisjunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChoiceContext choice() {
			return GetRuleContext<ChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public HeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_head; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadContext head() {
		HeadContext _localctx = new HeadContext(Context, State);
		EnterRule(_localctx, 10, RULE_head);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				disjunction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				choice();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 98;
				range();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext[] naf_literal() {
			return GetRuleContexts<Naf_literalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext naf_literal(int i) {
			return GetRuleContext<Naf_literalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LparseParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LparseParser.COMMA, i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 101;
			naf_literal();
			}
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 102;
				Match(COMMA);
				State = 103;
				naf_literal();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext classical_literal() {
			return GetRuleContext<Classical_literalContext>(0);
		}
		public DisjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisjunctionContext disjunction() {
		DisjunctionContext _localctx = new DisjunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_disjunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			classical_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 16, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			range_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChoiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_OPEN() { return GetToken(LparseParser.CURLY_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_CLOSE() { return GetToken(LparseParser.CURLY_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Choice_elementsContext choice_elements() {
			return GetRuleContext<Choice_elementsContext>(0);
		}
		public ChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChoiceContext choice() {
		ChoiceContext _localctx = new ChoiceContext(Context, State);
		EnterRule(_localctx, 18, RULE_choice);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(CURLY_OPEN);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID || _la==MINUS) {
				{
				State = 114;
				choice_elements();
				}
			}

			State = 117;
			Match(CURLY_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Choice_elementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Choice_elementContext[] choice_element() {
			return GetRuleContexts<Choice_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Choice_elementContext choice_element(int i) {
			return GetRuleContext<Choice_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(LparseParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(LparseParser.SEMICOLON, i);
		}
		public Choice_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice_elements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterChoice_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitChoice_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Choice_elementsContext choice_elements() {
		Choice_elementsContext _localctx = new Choice_elementsContext(Context, State);
		EnterRule(_localctx, 20, RULE_choice_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			choice_element();
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 120;
				Match(SEMICOLON);
				State = 121;
				choice_element();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Choice_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext classical_literal() {
			return GetRuleContext<Classical_literalContext>(0);
		}
		public Choice_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterChoice_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitChoice_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Choice_elementContext choice_element() {
		Choice_elementContext _localctx = new Choice_elementContext(Context, State);
		EnterRule(_localctx, 22, RULE_choice_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			classical_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Naf_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Is_operatorContext is_operator() {
			return GetRuleContext<Is_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext classical_literal() {
			return GetRuleContext<Classical_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAF() { return GetToken(LparseParser.NAF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_atomContext builtin_atom() {
			return GetRuleContext<Builtin_atomContext>(0);
		}
		public Naf_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naf_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterNaf_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitNaf_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNaf_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Naf_literalContext naf_literal() {
		Naf_literalContext _localctx = new Naf_literalContext(Context, State);
		EnterRule(_localctx, 24, RULE_naf_literal);
		int _la;
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				is_operator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAF) {
					{
					State = 130;
					Match(NAF);
					}
				}

				State = 133;
				classical_literal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 134;
				builtin_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Classical_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LparseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(LparseParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(LparseParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public Classical_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classical_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterClassical_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitClassical_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassical_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Classical_literalContext classical_literal() {
		Classical_literalContext _localctx = new Classical_literalContext(Context, State);
		EnterRule(_localctx, 26, RULE_classical_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 137;
				Match(MINUS);
				}
			}

			State = 140;
			Match(ID);
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 141;
				Match(PAREN_OPEN);
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 147512L) != 0)) {
					{
					State = 142;
					terms();
					}
				}

				State = 145;
				Match(PAREN_CLOSE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LparseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(LparseParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Range_bindingContext range_binding() {
			return GetRuleContext<Range_bindingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(LparseParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		public Range_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterRange_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitRange_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_literalContext range_literal() {
		Range_literalContext _localctx = new Range_literalContext(Context, State);
		EnterRule(_localctx, 28, RULE_range_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 148;
				Match(MINUS);
				}
			}

			State = 151;
			Match(ID);
			{
			State = 152;
			Match(PAREN_OPEN);
			State = 153;
			range_binding();
			State = 154;
			Match(PAREN_CLOSE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_bindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_numberContext[] range_number() {
			return GetRuleContexts<Range_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_numberContext range_number(int i) {
			return GetRuleContext<Range_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOT() { return GetToken(LparseParser.DOTDOT, 0); }
		public Range_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterRange_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitRange_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_bindingContext range_binding() {
		Range_bindingContext _localctx = new Range_bindingContext(Context, State);
		EnterRule(_localctx, 30, RULE_range_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			range_number();
			State = 157;
			Match(DOTDOT);
			State = 158;
			range_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LparseParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		public Range_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterRange_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitRange_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_numberContext range_number() {
		Range_numberContext _localctx = new Range_numberContext(Context, State);
		EnterRule(_localctx, 32, RULE_range_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 160;
				Match(MINUS);
				}
			}

			State = 163;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Builtin_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinopContext binop() {
			return GetRuleContext<BinopContext>(0);
		}
		public Builtin_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtin_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterBuiltin_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitBuiltin_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Builtin_atomContext builtin_atom() {
		Builtin_atomContext _localctx = new Builtin_atomContext(Context, State);
		EnterRule(_localctx, 34, RULE_builtin_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			term();
			State = 166;
			binop();
			State = 167;
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Is_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(LparseParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(LparseParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithopContext arithop() {
			return GetRuleContext<ArithopContext>(0);
		}
		public Is_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterIs_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitIs_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIs_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Is_operatorContext is_operator() {
		Is_operatorContext _localctx = new Is_operatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_is_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(VARIABLE);
			State = 170;
			Match(IS);
			State = 171;
			operand();
			State = 172;
			arithop();
			State = 173;
			operand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(LparseParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LparseParser.NUMBER, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 38, RULE_operand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==VARIABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIFICATION() { return GetToken(LparseParser.UNIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(LparseParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNEQUAL() { return GetToken(LparseParser.UNEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(LparseParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(LparseParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQ() { return GetToken(LparseParser.LESS_OR_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQ() { return GetToken(LparseParser.GREATER_OR_EQ, 0); }
		public BinopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterBinop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitBinop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinopContext binop() {
		BinopContext _localctx = new BinopContext(Context, State);
		EnterRule(_localctx, 40, RULE_binop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1065353216L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LparseParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LparseParser.COMMA, i);
		}
		public TermsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterTerms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitTerms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermsContext terms() {
		TermsContext _localctx = new TermsContext(Context, State);
		EnterRule(_localctx, 42, RULE_terms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			term();
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 180;
				Match(COMMA);
				State = 181;
				term();
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LparseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(LparseParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(LparseParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LparseParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(LparseParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 44, RULE_term);
		int _la;
		try {
			State = 203;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187;
				Match(ID);
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PAREN_OPEN) {
					{
					State = 188;
					Match(PAREN_OPEN);
					State = 189;
					terms();
					State = 190;
					Match(PAREN_CLOSE);
					}
				}

				}
				break;
			case NUMBER:
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 194;
					Match(MINUS);
					}
				}

				State = 197;
				Match(NUMBER);
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 198;
				Match(VARIABLE);
				}
				break;
			case PAREN_OPEN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 199;
				Match(PAREN_OPEN);
				State = 200;
				term();
				State = 201;
				Match(PAREN_CLOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LparseParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(LparseParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LparseParser.DIV, 0); }
		public ArithopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterArithop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitArithop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithopContext arithop() {
		ArithopContext _localctx = new ArithopContext(Context, State);
		EnterRule(_localctx, 46, RULE_arithop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 122880L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,31,208,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,1,0,3,0,51,8,0,1,0,3,0,54,8,0,1,1,1,1,5,1,58,8,
		1,10,1,12,1,61,9,1,1,2,1,2,1,2,5,2,66,8,2,10,2,12,2,69,9,2,1,2,1,2,1,3,
		1,3,3,3,75,8,3,1,3,1,3,1,3,3,3,80,8,3,1,3,3,3,83,8,3,1,3,1,3,3,3,87,8,
		3,1,4,1,4,1,4,5,4,92,8,4,10,4,12,4,95,9,4,1,5,1,5,1,5,3,5,100,8,5,1,6,
		1,6,1,6,5,6,105,8,6,10,6,12,6,108,9,6,1,7,1,7,1,8,1,8,1,9,1,9,3,9,116,
		8,9,1,9,1,9,1,10,1,10,1,10,5,10,123,8,10,10,10,12,10,126,9,10,1,11,1,11,
		1,12,1,12,3,12,132,8,12,1,12,1,12,3,12,136,8,12,1,13,3,13,139,8,13,1,13,
		1,13,1,13,3,13,144,8,13,1,13,3,13,147,8,13,1,14,3,14,150,8,14,1,14,1,14,
		1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,3,16,162,8,16,1,16,1,16,1,17,1,
		17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
		21,1,21,5,21,183,8,21,10,21,12,21,186,9,21,1,22,1,22,1,22,1,22,1,22,3,
		22,193,8,22,1,22,3,22,196,8,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,204,
		8,22,1,23,1,23,1,23,0,0,24,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
		32,34,36,38,40,42,44,46,0,3,2,0,3,3,5,5,1,0,23,29,1,0,13,16,211,0,53,1,
		0,0,0,2,55,1,0,0,0,4,62,1,0,0,0,6,86,1,0,0,0,8,88,1,0,0,0,10,99,1,0,0,
		0,12,101,1,0,0,0,14,109,1,0,0,0,16,111,1,0,0,0,18,113,1,0,0,0,20,119,1,
		0,0,0,22,127,1,0,0,0,24,135,1,0,0,0,26,138,1,0,0,0,28,149,1,0,0,0,30,156,
		1,0,0,0,32,161,1,0,0,0,34,165,1,0,0,0,36,169,1,0,0,0,38,175,1,0,0,0,40,
		177,1,0,0,0,42,179,1,0,0,0,44,203,1,0,0,0,46,205,1,0,0,0,48,50,3,2,1,0,
		49,51,3,4,2,0,50,49,1,0,0,0,50,51,1,0,0,0,51,54,1,0,0,0,52,54,3,4,2,0,
		53,48,1,0,0,0,53,52,1,0,0,0,54,1,1,0,0,0,55,59,3,6,3,0,56,58,3,6,3,0,57,
		56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,3,1,0,0,0,61,59,
		1,0,0,0,62,67,3,12,6,0,63,64,5,11,0,0,64,66,3,12,6,0,65,63,1,0,0,0,66,
		69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,70,1,0,0,0,69,67,1,0,0,0,70,
		71,5,9,0,0,71,5,1,0,0,0,72,74,5,12,0,0,73,75,3,8,4,0,74,73,1,0,0,0,74,
		75,1,0,0,0,75,76,1,0,0,0,76,87,5,6,0,0,77,79,3,10,5,0,78,80,5,12,0,0,79,
		78,1,0,0,0,79,80,1,0,0,0,80,82,1,0,0,0,81,83,3,8,4,0,82,81,1,0,0,0,82,
		83,1,0,0,0,83,84,1,0,0,0,84,85,5,6,0,0,85,87,1,0,0,0,86,72,1,0,0,0,86,
		77,1,0,0,0,87,7,1,0,0,0,88,93,3,12,6,0,89,90,5,11,0,0,90,92,3,12,6,0,91,
		89,1,0,0,0,92,95,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,9,1,0,0,0,95,93,
		1,0,0,0,96,100,3,14,7,0,97,100,3,18,9,0,98,100,3,16,8,0,99,96,1,0,0,0,
		99,97,1,0,0,0,99,98,1,0,0,0,100,11,1,0,0,0,101,106,3,24,12,0,102,103,5,
		8,0,0,103,105,3,24,12,0,104,102,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,
		0,106,107,1,0,0,0,107,13,1,0,0,0,108,106,1,0,0,0,109,110,3,26,13,0,110,
		15,1,0,0,0,111,112,3,28,14,0,112,17,1,0,0,0,113,115,5,21,0,0,114,116,3,
		20,10,0,115,114,1,0,0,0,115,116,1,0,0,0,116,117,1,0,0,0,117,118,5,22,0,
		0,118,19,1,0,0,0,119,124,3,22,11,0,120,121,5,11,0,0,121,123,3,22,11,0,
		122,120,1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,21,
		1,0,0,0,126,124,1,0,0,0,127,128,3,26,13,0,128,23,1,0,0,0,129,136,3,36,
		18,0,130,132,5,1,0,0,131,130,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,
		136,3,26,13,0,134,136,3,34,17,0,135,129,1,0,0,0,135,131,1,0,0,0,135,134,
		1,0,0,0,136,25,1,0,0,0,137,139,5,14,0,0,138,137,1,0,0,0,138,139,1,0,0,
		0,139,140,1,0,0,0,140,146,5,4,0,0,141,143,5,17,0,0,142,144,3,42,21,0,143,
		142,1,0,0,0,143,144,1,0,0,0,144,145,1,0,0,0,145,147,5,18,0,0,146,141,1,
		0,0,0,146,147,1,0,0,0,147,27,1,0,0,0,148,150,5,14,0,0,149,148,1,0,0,0,
		149,150,1,0,0,0,150,151,1,0,0,0,151,152,5,4,0,0,152,153,5,17,0,0,153,154,
		3,30,15,0,154,155,5,18,0,0,155,29,1,0,0,0,156,157,3,32,16,0,157,158,5,
		7,0,0,158,159,3,32,16,0,159,31,1,0,0,0,160,162,5,14,0,0,161,160,1,0,0,
		0,161,162,1,0,0,0,162,163,1,0,0,0,163,164,5,3,0,0,164,33,1,0,0,0,165,166,
		3,44,22,0,166,167,3,40,20,0,167,168,3,44,22,0,168,35,1,0,0,0,169,170,5,
		5,0,0,170,171,5,2,0,0,171,172,3,38,19,0,172,173,3,46,23,0,173,174,3,38,
		19,0,174,37,1,0,0,0,175,176,7,0,0,0,176,39,1,0,0,0,177,178,7,1,0,0,178,
		41,1,0,0,0,179,184,3,44,22,0,180,181,5,8,0,0,181,183,3,44,22,0,182,180,
		1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,43,1,0,0,0,
		186,184,1,0,0,0,187,192,5,4,0,0,188,189,5,17,0,0,189,190,3,42,21,0,190,
		191,5,18,0,0,191,193,1,0,0,0,192,188,1,0,0,0,192,193,1,0,0,0,193,204,1,
		0,0,0,194,196,5,14,0,0,195,194,1,0,0,0,195,196,1,0,0,0,196,197,1,0,0,0,
		197,204,5,3,0,0,198,204,5,5,0,0,199,200,5,17,0,0,200,201,3,44,22,0,201,
		202,5,18,0,0,202,204,1,0,0,0,203,187,1,0,0,0,203,195,1,0,0,0,203,198,1,
		0,0,0,203,199,1,0,0,0,204,45,1,0,0,0,205,206,7,2,0,0,206,47,1,0,0,0,24,
		50,53,59,67,74,79,82,86,93,99,106,115,124,131,135,138,143,146,149,161,
		184,192,195,203
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
