//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Lparse.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class LparseParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NAF=1, NUMBER=2, ID=3, VARIABLE=4, DOT=5, DOTDOT=6, COMMA=7, QUERY_MARK=8, 
		COLON=9, SEMICOLON=10, CONS=11, PLUS=12, MINUS=13, TIMES=14, DIV=15, PAREN_OPEN=16, 
		PAREN_CLOSE=17, SQUARE_OPEN=18, SQUARE_CLOSE=19, CURLY_OPEN=20, CURLY_CLOSE=21, 
		EQUAL=22, UNEQUAL=23, LESS=24, GREATER=25, LESS_OR_EQ=26, GREATER_OR_EQ=27, 
		LINE_COMMENT=28, WS=29;
	public const int
		RULE_program = 0, RULE_statements = 1, RULE_query = 2, RULE_statement = 3, 
		RULE_head = 4, RULE_body = 5, RULE_disjunction = 6, RULE_range = 7, RULE_choice = 8, 
		RULE_choice_elements = 9, RULE_choice_element = 10, RULE_naf_literal = 11, 
		RULE_classical_literal = 12, RULE_range_literal = 13, RULE_range_binding = 14, 
		RULE_range_number = 15, RULE_builtin_atom = 16, RULE_binop = 17, RULE_terms = 18, 
		RULE_term = 19, RULE_arithop = 20;
	public static readonly string[] ruleNames = {
		"program", "statements", "query", "statement", "head", "body", "disjunction", 
		"range", "choice", "choice_elements", "choice_element", "naf_literal", 
		"classical_literal", "range_literal", "range_binding", "range_number", 
		"builtin_atom", "binop", "terms", "term", "arithop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'not'", null, null, null, "'.'", "'..'", "','", "'?'", "':'", "';'", 
		"':-'", "'+'", "'-'", "'*'", "'/'", "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "'='", null, "'<'", "'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NAF", "NUMBER", "ID", "VARIABLE", "DOT", "DOTDOT", "COMMA", "QUERY_MARK", 
		"COLON", "SEMICOLON", "CONS", "PLUS", "MINUS", "TIMES", "DIV", "PAREN_OPEN", 
		"PAREN_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", 
		"EQUAL", "UNEQUAL", "LESS", "GREATER", "LESS_OR_EQ", "GREATER_OR_EQ", 
		"LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lparse.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LparseParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LparseParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LparseParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				statements();
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 73758L) != 0)) {
					{
					State = 43;
					query();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				query();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_statements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			statement();
			State = 53;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 50;
					statement();
					}
					} 
				}
				State = 55;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_MARK() { return GetToken(LparseParser.QUERY_MARK, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 4, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			body();
			State = 57;
			Match(QUERY_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONS() { return GetToken(LparseParser.CONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LparseParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeadContext head() {
			return GetRuleContext<HeadContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		int _la;
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				Match(CONS);
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 73758L) != 0)) {
					{
					State = 60;
					body();
					}
				}

				State = 63;
				Match(DOT);
				}
				break;
			case ID:
			case MINUS:
			case CURLY_OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64;
				head();
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONS) {
					{
					State = 65;
					Match(CONS);
					}
				}

				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 73758L) != 0)) {
					{
					State = 68;
					body();
					}
				}

				State = 71;
				Match(DOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionContext disjunction() {
			return GetRuleContext<DisjunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChoiceContext choice() {
			return GetRuleContext<ChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public HeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_head; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadContext head() {
		HeadContext _localctx = new HeadContext(Context, State);
		EnterRule(_localctx, 8, RULE_head);
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				disjunction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76;
				choice();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 77;
				range();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext[] naf_literal() {
			return GetRuleContexts<Naf_literalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext naf_literal(int i) {
			return GetRuleContext<Naf_literalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LparseParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LparseParser.COMMA, i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 80;
			naf_literal();
			}
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 81;
				Match(COMMA);
				{
				State = 82;
				naf_literal();
				}
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext classical_literal() {
			return GetRuleContext<Classical_literalContext>(0);
		}
		public DisjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisjunctionContext disjunction() {
		DisjunctionContext _localctx = new DisjunctionContext(Context, State);
		EnterRule(_localctx, 12, RULE_disjunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			classical_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 14, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			range_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChoiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_OPEN() { return GetToken(LparseParser.CURLY_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_CLOSE() { return GetToken(LparseParser.CURLY_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Choice_elementsContext choice_elements() {
			return GetRuleContext<Choice_elementsContext>(0);
		}
		public ChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChoiceContext choice() {
		ChoiceContext _localctx = new ChoiceContext(Context, State);
		EnterRule(_localctx, 16, RULE_choice);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(CURLY_OPEN);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID || _la==MINUS) {
				{
				State = 93;
				choice_elements();
				}
			}

			State = 96;
			Match(CURLY_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Choice_elementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Choice_elementContext[] choice_element() {
			return GetRuleContexts<Choice_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Choice_elementContext choice_element(int i) {
			return GetRuleContext<Choice_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(LparseParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(LparseParser.SEMICOLON, i);
		}
		public Choice_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice_elements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterChoice_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitChoice_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Choice_elementsContext choice_elements() {
		Choice_elementsContext _localctx = new Choice_elementsContext(Context, State);
		EnterRule(_localctx, 18, RULE_choice_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			choice_element();
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 99;
				Match(SEMICOLON);
				State = 100;
				choice_element();
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Choice_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext classical_literal() {
			return GetRuleContext<Classical_literalContext>(0);
		}
		public Choice_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterChoice_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitChoice_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Choice_elementContext choice_element() {
		Choice_elementContext _localctx = new Choice_elementContext(Context, State);
		EnterRule(_localctx, 20, RULE_choice_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			classical_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Naf_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext classical_literal() {
			return GetRuleContext<Classical_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAF() { return GetToken(LparseParser.NAF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_atomContext builtin_atom() {
			return GetRuleContext<Builtin_atomContext>(0);
		}
		public Naf_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naf_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterNaf_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitNaf_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNaf_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Naf_literalContext naf_literal() {
		Naf_literalContext _localctx = new Naf_literalContext(Context, State);
		EnterRule(_localctx, 22, RULE_naf_literal);
		int _la;
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAF) {
					{
					State = 108;
					Match(NAF);
					}
				}

				State = 111;
				classical_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112;
				builtin_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Classical_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LparseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(LparseParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(LparseParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public Classical_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classical_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterClassical_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitClassical_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassical_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Classical_literalContext classical_literal() {
		Classical_literalContext _localctx = new Classical_literalContext(Context, State);
		EnterRule(_localctx, 24, RULE_classical_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 115;
				Match(MINUS);
				}
			}

			State = 118;
			Match(ID);
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 119;
				Match(PAREN_OPEN);
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 73756L) != 0)) {
					{
					State = 120;
					terms();
					}
				}

				State = 123;
				Match(PAREN_CLOSE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LparseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(LparseParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Range_bindingContext range_binding() {
			return GetRuleContext<Range_bindingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(LparseParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		public Range_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterRange_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitRange_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_literalContext range_literal() {
		Range_literalContext _localctx = new Range_literalContext(Context, State);
		EnterRule(_localctx, 26, RULE_range_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 126;
				Match(MINUS);
				}
			}

			State = 129;
			Match(ID);
			{
			State = 130;
			Match(PAREN_OPEN);
			State = 131;
			range_binding();
			State = 132;
			Match(PAREN_CLOSE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_bindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_numberContext[] range_number() {
			return GetRuleContexts<Range_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_numberContext range_number(int i) {
			return GetRuleContext<Range_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOT() { return GetToken(LparseParser.DOTDOT, 0); }
		public Range_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterRange_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitRange_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_bindingContext range_binding() {
		Range_bindingContext _localctx = new Range_bindingContext(Context, State);
		EnterRule(_localctx, 28, RULE_range_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			range_number();
			State = 135;
			Match(DOTDOT);
			State = 136;
			range_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LparseParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		public Range_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterRange_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitRange_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_numberContext range_number() {
		Range_numberContext _localctx = new Range_numberContext(Context, State);
		EnterRule(_localctx, 30, RULE_range_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 138;
				Match(MINUS);
				}
			}

			State = 141;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Builtin_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinopContext binop() {
			return GetRuleContext<BinopContext>(0);
		}
		public Builtin_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtin_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterBuiltin_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitBuiltin_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Builtin_atomContext builtin_atom() {
		Builtin_atomContext _localctx = new Builtin_atomContext(Context, State);
		EnterRule(_localctx, 32, RULE_builtin_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			term(0);
			State = 144;
			binop();
			State = 145;
			term(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(LparseParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNEQUAL() { return GetToken(LparseParser.UNEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(LparseParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(LparseParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQ() { return GetToken(LparseParser.LESS_OR_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQ() { return GetToken(LparseParser.GREATER_OR_EQ, 0); }
		public BinopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterBinop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitBinop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinopContext binop() {
		BinopContext _localctx = new BinopContext(Context, State);
		EnterRule(_localctx, 34, RULE_binop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 264241152L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LparseParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LparseParser.COMMA, i);
		}
		public TermsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterTerms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitTerms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermsContext terms() {
		TermsContext _localctx = new TermsContext(Context, State);
		EnterRule(_localctx, 36, RULE_terms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			term(0);
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 150;
				Match(COMMA);
				State = 151;
				term(0);
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LparseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(LparseParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(LparseParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LparseParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(LparseParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithopContext arithop() {
			return GetRuleContext<ArithopContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_term, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 158;
				Match(ID);
				State = 163;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 159;
					Match(PAREN_OPEN);
					State = 160;
					terms();
					State = 161;
					Match(PAREN_CLOSE);
					}
					break;
				}
				}
				break;
			case NUMBER:
			case MINUS:
				{
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 165;
					Match(MINUS);
					}
				}

				State = 168;
				Match(NUMBER);
				}
				break;
			case VARIABLE:
				{
				State = 169;
				Match(VARIABLE);
				}
				break;
			case PAREN_OPEN:
				{
				State = 170;
				Match(PAREN_OPEN);
				State = 171;
				term(0);
				State = 172;
				Match(PAREN_CLOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 182;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TermContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 176;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 177;
					arithop();
					State = 178;
					term(2);
					}
					} 
				}
				State = 184;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArithopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LparseParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(LparseParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LparseParser.DIV, 0); }
		public ArithopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterArithop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitArithop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithopContext arithop() {
		ArithopContext _localctx = new ArithopContext(Context, State);
		EnterRule(_localctx, 40, RULE_arithop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 61440L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,29,188,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,0,3,
		0,45,8,0,1,0,3,0,48,8,0,1,1,1,1,5,1,52,8,1,10,1,12,1,55,9,1,1,2,1,2,1,
		2,1,3,1,3,3,3,62,8,3,1,3,1,3,1,3,3,3,67,8,3,1,3,3,3,70,8,3,1,3,1,3,3,3,
		74,8,3,1,4,1,4,1,4,3,4,79,8,4,1,5,1,5,1,5,5,5,84,8,5,10,5,12,5,87,9,5,
		1,6,1,6,1,7,1,7,1,8,1,8,3,8,95,8,8,1,8,1,8,1,9,1,9,1,9,5,9,102,8,9,10,
		9,12,9,105,9,9,1,10,1,10,1,11,3,11,110,8,11,1,11,1,11,3,11,114,8,11,1,
		12,3,12,117,8,12,1,12,1,12,1,12,3,12,122,8,12,1,12,3,12,125,8,12,1,13,
		3,13,128,8,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,3,15,140,
		8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,5,18,153,8,
		18,10,18,12,18,156,9,18,1,19,1,19,1,19,1,19,1,19,1,19,3,19,164,8,19,1,
		19,3,19,167,8,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,175,8,19,1,19,1,19,
		1,19,1,19,5,19,181,8,19,10,19,12,19,184,9,19,1,20,1,20,1,20,0,1,38,21,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,0,2,1,0,22,27,
		1,0,12,15,192,0,47,1,0,0,0,2,49,1,0,0,0,4,56,1,0,0,0,6,73,1,0,0,0,8,78,
		1,0,0,0,10,80,1,0,0,0,12,88,1,0,0,0,14,90,1,0,0,0,16,92,1,0,0,0,18,98,
		1,0,0,0,20,106,1,0,0,0,22,113,1,0,0,0,24,116,1,0,0,0,26,127,1,0,0,0,28,
		134,1,0,0,0,30,139,1,0,0,0,32,143,1,0,0,0,34,147,1,0,0,0,36,149,1,0,0,
		0,38,174,1,0,0,0,40,185,1,0,0,0,42,44,3,2,1,0,43,45,3,4,2,0,44,43,1,0,
		0,0,44,45,1,0,0,0,45,48,1,0,0,0,46,48,3,4,2,0,47,42,1,0,0,0,47,46,1,0,
		0,0,48,1,1,0,0,0,49,53,3,6,3,0,50,52,3,6,3,0,51,50,1,0,0,0,52,55,1,0,0,
		0,53,51,1,0,0,0,53,54,1,0,0,0,54,3,1,0,0,0,55,53,1,0,0,0,56,57,3,10,5,
		0,57,58,5,8,0,0,58,5,1,0,0,0,59,61,5,11,0,0,60,62,3,10,5,0,61,60,1,0,0,
		0,61,62,1,0,0,0,62,63,1,0,0,0,63,74,5,5,0,0,64,66,3,8,4,0,65,67,5,11,0,
		0,66,65,1,0,0,0,66,67,1,0,0,0,67,69,1,0,0,0,68,70,3,10,5,0,69,68,1,0,0,
		0,69,70,1,0,0,0,70,71,1,0,0,0,71,72,5,5,0,0,72,74,1,0,0,0,73,59,1,0,0,
		0,73,64,1,0,0,0,74,7,1,0,0,0,75,79,3,12,6,0,76,79,3,16,8,0,77,79,3,14,
		7,0,78,75,1,0,0,0,78,76,1,0,0,0,78,77,1,0,0,0,79,9,1,0,0,0,80,85,3,22,
		11,0,81,82,5,7,0,0,82,84,3,22,11,0,83,81,1,0,0,0,84,87,1,0,0,0,85,83,1,
		0,0,0,85,86,1,0,0,0,86,11,1,0,0,0,87,85,1,0,0,0,88,89,3,24,12,0,89,13,
		1,0,0,0,90,91,3,26,13,0,91,15,1,0,0,0,92,94,5,20,0,0,93,95,3,18,9,0,94,
		93,1,0,0,0,94,95,1,0,0,0,95,96,1,0,0,0,96,97,5,21,0,0,97,17,1,0,0,0,98,
		103,3,20,10,0,99,100,5,10,0,0,100,102,3,20,10,0,101,99,1,0,0,0,102,105,
		1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,104,19,1,0,0,0,105,103,1,0,0,0,
		106,107,3,24,12,0,107,21,1,0,0,0,108,110,5,1,0,0,109,108,1,0,0,0,109,110,
		1,0,0,0,110,111,1,0,0,0,111,114,3,24,12,0,112,114,3,32,16,0,113,109,1,
		0,0,0,113,112,1,0,0,0,114,23,1,0,0,0,115,117,5,13,0,0,116,115,1,0,0,0,
		116,117,1,0,0,0,117,118,1,0,0,0,118,124,5,3,0,0,119,121,5,16,0,0,120,122,
		3,36,18,0,121,120,1,0,0,0,121,122,1,0,0,0,122,123,1,0,0,0,123,125,5,17,
		0,0,124,119,1,0,0,0,124,125,1,0,0,0,125,25,1,0,0,0,126,128,5,13,0,0,127,
		126,1,0,0,0,127,128,1,0,0,0,128,129,1,0,0,0,129,130,5,3,0,0,130,131,5,
		16,0,0,131,132,3,28,14,0,132,133,5,17,0,0,133,27,1,0,0,0,134,135,3,30,
		15,0,135,136,5,6,0,0,136,137,3,30,15,0,137,29,1,0,0,0,138,140,5,13,0,0,
		139,138,1,0,0,0,139,140,1,0,0,0,140,141,1,0,0,0,141,142,5,2,0,0,142,31,
		1,0,0,0,143,144,3,38,19,0,144,145,3,34,17,0,145,146,3,38,19,0,146,33,1,
		0,0,0,147,148,7,0,0,0,148,35,1,0,0,0,149,154,3,38,19,0,150,151,5,7,0,0,
		151,153,3,38,19,0,152,150,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,
		155,1,0,0,0,155,37,1,0,0,0,156,154,1,0,0,0,157,158,6,19,-1,0,158,163,5,
		3,0,0,159,160,5,16,0,0,160,161,3,36,18,0,161,162,5,17,0,0,162,164,1,0,
		0,0,163,159,1,0,0,0,163,164,1,0,0,0,164,175,1,0,0,0,165,167,5,13,0,0,166,
		165,1,0,0,0,166,167,1,0,0,0,167,168,1,0,0,0,168,175,5,2,0,0,169,175,5,
		4,0,0,170,171,5,16,0,0,171,172,3,38,19,0,172,173,5,17,0,0,173,175,1,0,
		0,0,174,157,1,0,0,0,174,166,1,0,0,0,174,169,1,0,0,0,174,170,1,0,0,0,175,
		182,1,0,0,0,176,177,10,1,0,0,177,178,3,40,20,0,178,179,3,38,19,2,179,181,
		1,0,0,0,180,176,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,
		0,183,39,1,0,0,0,184,182,1,0,0,0,185,186,7,1,0,0,186,41,1,0,0,0,23,44,
		47,53,61,66,69,73,78,85,94,103,109,113,116,121,124,127,139,154,163,166,
		174,182
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
