//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Lparse.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class LparseParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NAF=1, IS=2, MOD=3, NUMBER=4, ID=5, VARIABLE=6, DOT=7, DOTDOT=8, AT=9, 
		COMMA=10, QUERY_MARK=11, DOUBLE_COLON=12, COLON=13, SEMICOLON=14, CONS=15, 
		PLUS=16, MINUS=17, TIMES=18, DIV=19, PAREN_OPEN=20, PAREN_CLOSE=21, SQUARE_OPEN=22, 
		SQUARE_CLOSE=23, CURLY_OPEN=24, CURLY_CLOSE=25, UNIFICATION=26, EQUAL=27, 
		UNEQUAL=28, LESS=29, GREATER=30, LESS_OR_EQ=31, GREATER_OR_EQ=32, LINE_COMMENT=33, 
		WS=34;
	public const int
		RULE_program = 0, RULE_statements = 1, RULE_query = 2, RULE_statement = 3, 
		RULE_text = 4, RULE_comment_bods = 5, RULE_comment_bod = 6, RULE_special = 7, 
		RULE_bodies = 8, RULE_head = 9, RULE_body = 10, RULE_disjunction = 11, 
		RULE_range = 12, RULE_choice = 13, RULE_choice_elements = 14, RULE_choice_element = 15, 
		RULE_naf_literal = 16, RULE_classical_literal = 17, RULE_range_literal = 18, 
		RULE_range_binding = 19, RULE_range_number = 20, RULE_builtin_atom = 21, 
		RULE_is_operator = 22, RULE_operand = 23, RULE_binop = 24, RULE_terms = 25, 
		RULE_term = 26, RULE_arithop = 27;
	public static readonly string[] ruleNames = {
		"program", "statements", "query", "statement", "text", "comment_bods", 
		"comment_bod", "special", "bodies", "head", "body", "disjunction", "range", 
		"choice", "choice_elements", "choice_element", "naf_literal", "classical_literal", 
		"range_literal", "range_binding", "range_number", "builtin_atom", "is_operator", 
		"operand", "binop", "terms", "term", "arithop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'not'", "'is'", "'mod'", null, null, null, "'.'", "'..'", "'@'", 
		"','", "'?'", "'::'", "':'", "';'", "':-'", "'+'", "'-'", "'*'", "'/'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'='", "'=='", null, "'<'", 
		"'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NAF", "IS", "MOD", "NUMBER", "ID", "VARIABLE", "DOT", "DOTDOT", 
		"AT", "COMMA", "QUERY_MARK", "DOUBLE_COLON", "COLON", "SEMICOLON", "CONS", 
		"PLUS", "MINUS", "TIMES", "DIV", "PAREN_OPEN", "PAREN_CLOSE", "SQUARE_OPEN", 
		"SQUARE_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", "UNIFICATION", "EQUAL", "UNEQUAL", 
		"LESS", "GREATER", "LESS_OR_EQ", "GREATER_OR_EQ", "LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lparse.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LparseParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LparseParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LparseParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				statements();
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1179762L) != 0)) {
					{
					State = 57;
					query();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60;
				query();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_statements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			statement();
			State = 67;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 64;
					statement();
					}
					} 
				}
				State = 69;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext[] body() {
			return GetRuleContexts<BodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body(int i) {
			return GetRuleContext<BodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_MARK() { return GetToken(LparseParser.QUERY_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(LparseParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(LparseParser.SEMICOLON, i);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 4, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			body();
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 71;
				Match(SEMICOLON);
				State = 72;
				body();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78;
			Match(QUERY_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONS() { return GetToken(LparseParser.CONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LparseParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodiesContext bodies() {
			return GetRuleContext<BodiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeadContext head() {
			return GetRuleContext<HeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(LparseParser.DOUBLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comment_bodsContext comment_bods() {
			return GetRuleContext<Comment_bodsContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		int _la;
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				Match(CONS);
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1179762L) != 0)) {
					{
					State = 81;
					bodies();
					}
				}

				State = 84;
				Match(DOT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85;
				head();
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONS) {
					{
					State = 86;
					Match(CONS);
					}
				}

				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1179762L) != 0)) {
					{
					State = 89;
					bodies();
					}
				}

				State = 92;
				Match(DOT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 94;
				head();
				State = 95;
				Match(DOUBLE_COLON);
				State = 96;
				comment_bods();
				State = 97;
				Match(DOT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LparseParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LparseParser.ID, i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 8, RULE_text);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(ID);
			State = 105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 102;
					Match(ID);
					}
					} 
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_bodsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comment_bodContext[] comment_bod() {
			return GetRuleContexts<Comment_bodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comment_bodContext comment_bod(int i) {
			return GetRuleContext<Comment_bodContext>(i);
		}
		public Comment_bodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_bods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterComment_bods(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitComment_bods(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment_bods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comment_bodsContext comment_bods() {
		Comment_bodsContext _localctx = new Comment_bodsContext(Context, State);
		EnterRule(_localctx, 10, RULE_comment_bods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			comment_bod();
			{
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID || _la==AT) {
				{
				{
				State = 109;
				comment_bod();
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_bodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecialContext special() {
			return GetRuleContext<SpecialContext>(0);
		}
		public Comment_bodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_bod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterComment_bod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitComment_bod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment_bod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comment_bodContext comment_bod() {
		Comment_bodContext _localctx = new Comment_bodContext(Context, State);
		EnterRule(_localctx, 12, RULE_comment_bod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 115;
				text();
				}
				break;
			case AT:
				{
				State = 116;
				special();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(LparseParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(LparseParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(LparseParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(LparseParser.PAREN_CLOSE, 0); }
		public SpecialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_special; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterSpecial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitSpecial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialContext special() {
		SpecialContext _localctx = new SpecialContext(Context, State);
		EnterRule(_localctx, 14, RULE_special);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(AT);
			State = 120;
			Match(PAREN_OPEN);
			State = 121;
			Match(VARIABLE);
			State = 122;
			Match(PAREN_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext[] body() {
			return GetRuleContexts<BodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body(int i) {
			return GetRuleContext<BodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(LparseParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(LparseParser.SEMICOLON, i);
		}
		public BodiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bodies; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterBodies(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitBodies(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBodies(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodiesContext bodies() {
		BodiesContext _localctx = new BodiesContext(Context, State);
		EnterRule(_localctx, 16, RULE_bodies);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			body();
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 125;
				Match(SEMICOLON);
				State = 126;
				body();
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionContext disjunction() {
			return GetRuleContext<DisjunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChoiceContext choice() {
			return GetRuleContext<ChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public HeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_head; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadContext head() {
		HeadContext _localctx = new HeadContext(Context, State);
		EnterRule(_localctx, 18, RULE_head);
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				disjunction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				choice();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 134;
				range();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext[] naf_literal() {
			return GetRuleContexts<Naf_literalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Naf_literalContext naf_literal(int i) {
			return GetRuleContext<Naf_literalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LparseParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LparseParser.COMMA, i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 137;
			naf_literal();
			}
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 138;
				Match(COMMA);
				State = 139;
				naf_literal();
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext classical_literal() {
			return GetRuleContext<Classical_literalContext>(0);
		}
		public DisjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisjunctionContext disjunction() {
		DisjunctionContext _localctx = new DisjunctionContext(Context, State);
		EnterRule(_localctx, 22, RULE_disjunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			classical_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 24, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			range_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChoiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_OPEN() { return GetToken(LparseParser.CURLY_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLY_CLOSE() { return GetToken(LparseParser.CURLY_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Choice_elementsContext choice_elements() {
			return GetRuleContext<Choice_elementsContext>(0);
		}
		public ChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChoiceContext choice() {
		ChoiceContext _localctx = new ChoiceContext(Context, State);
		EnterRule(_localctx, 26, RULE_choice);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(CURLY_OPEN);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID || _la==MINUS) {
				{
				State = 150;
				choice_elements();
				}
			}

			State = 153;
			Match(CURLY_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Choice_elementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Choice_elementContext[] choice_element() {
			return GetRuleContexts<Choice_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Choice_elementContext choice_element(int i) {
			return GetRuleContext<Choice_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(LparseParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(LparseParser.SEMICOLON, i);
		}
		public Choice_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice_elements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterChoice_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitChoice_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Choice_elementsContext choice_elements() {
		Choice_elementsContext _localctx = new Choice_elementsContext(Context, State);
		EnterRule(_localctx, 28, RULE_choice_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			choice_element();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 156;
				Match(SEMICOLON);
				State = 157;
				choice_element();
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Choice_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext classical_literal() {
			return GetRuleContext<Classical_literalContext>(0);
		}
		public Choice_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterChoice_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitChoice_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Choice_elementContext choice_element() {
		Choice_elementContext _localctx = new Choice_elementContext(Context, State);
		EnterRule(_localctx, 30, RULE_choice_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			classical_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Naf_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Is_operatorContext is_operator() {
			return GetRuleContext<Is_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Classical_literalContext classical_literal() {
			return GetRuleContext<Classical_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAF() { return GetToken(LparseParser.NAF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_atomContext builtin_atom() {
			return GetRuleContext<Builtin_atomContext>(0);
		}
		public Naf_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naf_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterNaf_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitNaf_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNaf_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Naf_literalContext naf_literal() {
		Naf_literalContext _localctx = new Naf_literalContext(Context, State);
		EnterRule(_localctx, 32, RULE_naf_literal);
		int _la;
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				is_operator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAF) {
					{
					State = 166;
					Match(NAF);
					}
				}

				State = 169;
				classical_literal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 170;
				builtin_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Classical_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LparseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(LparseParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(LparseParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		public Classical_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classical_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterClassical_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitClassical_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassical_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Classical_literalContext classical_literal() {
		Classical_literalContext _localctx = new Classical_literalContext(Context, State);
		EnterRule(_localctx, 34, RULE_classical_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 173;
				Match(MINUS);
				}
			}

			State = 176;
			Match(ID);
			State = 182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 177;
				Match(PAREN_OPEN);
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1179760L) != 0)) {
					{
					State = 178;
					terms();
					}
				}

				State = 181;
				Match(PAREN_CLOSE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LparseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(LparseParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Range_bindingContext range_binding() {
			return GetRuleContext<Range_bindingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(LparseParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		public Range_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterRange_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitRange_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_literalContext range_literal() {
		Range_literalContext _localctx = new Range_literalContext(Context, State);
		EnterRule(_localctx, 36, RULE_range_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 184;
				Match(MINUS);
				}
			}

			State = 187;
			Match(ID);
			{
			State = 188;
			Match(PAREN_OPEN);
			State = 189;
			range_binding();
			State = 190;
			Match(PAREN_CLOSE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_bindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_numberContext[] range_number() {
			return GetRuleContexts<Range_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_numberContext range_number(int i) {
			return GetRuleContext<Range_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOT() { return GetToken(LparseParser.DOTDOT, 0); }
		public Range_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterRange_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitRange_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_bindingContext range_binding() {
		Range_bindingContext _localctx = new Range_bindingContext(Context, State);
		EnterRule(_localctx, 38, RULE_range_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			range_number();
			State = 193;
			Match(DOTDOT);
			State = 194;
			range_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LparseParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		public Range_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterRange_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitRange_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_numberContext range_number() {
		Range_numberContext _localctx = new Range_numberContext(Context, State);
		EnterRule(_localctx, 40, RULE_range_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 196;
				Match(MINUS);
				}
			}

			State = 199;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Builtin_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinopContext binop() {
			return GetRuleContext<BinopContext>(0);
		}
		public Builtin_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtin_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterBuiltin_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitBuiltin_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Builtin_atomContext builtin_atom() {
		Builtin_atomContext _localctx = new Builtin_atomContext(Context, State);
		EnterRule(_localctx, 42, RULE_builtin_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			term();
			State = 202;
			binop();
			State = 203;
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Is_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(LparseParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(LparseParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithopContext arithop() {
			return GetRuleContext<ArithopContext>(0);
		}
		public Is_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterIs_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitIs_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIs_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Is_operatorContext is_operator() {
		Is_operatorContext _localctx = new Is_operatorContext(Context, State);
		EnterRule(_localctx, 44, RULE_is_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(VARIABLE);
			State = 206;
			Match(IS);
			State = 207;
			operand();
			State = 208;
			arithop();
			State = 209;
			operand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(LparseParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LparseParser.NUMBER, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 46, RULE_operand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==VARIABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIFICATION() { return GetToken(LparseParser.UNIFICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(LparseParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNEQUAL() { return GetToken(LparseParser.UNEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(LparseParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(LparseParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQ() { return GetToken(LparseParser.LESS_OR_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQ() { return GetToken(LparseParser.GREATER_OR_EQ, 0); }
		public BinopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterBinop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitBinop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinopContext binop() {
		BinopContext _localctx = new BinopContext(Context, State);
		EnterRule(_localctx, 48, RULE_binop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8522825728L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LparseParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LparseParser.COMMA, i);
		}
		public TermsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterTerms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitTerms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermsContext terms() {
		TermsContext _localctx = new TermsContext(Context, State);
		EnterRule(_localctx, 50, RULE_terms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			term();
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 216;
				Match(COMMA);
				State = 217;
				term();
				}
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LparseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_OPEN() { return GetToken(LparseParser.PAREN_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermsContext terms() {
			return GetRuleContext<TermsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAREN_CLOSE() { return GetToken(LparseParser.PAREN_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LparseParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(LparseParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 52, RULE_term);
		int _la;
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				Match(ID);
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PAREN_OPEN) {
					{
					State = 224;
					Match(PAREN_OPEN);
					State = 225;
					terms();
					State = 226;
					Match(PAREN_CLOSE);
					}
				}

				}
				break;
			case NUMBER:
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 230;
					Match(MINUS);
					}
				}

				State = 233;
				Match(NUMBER);
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 234;
				Match(VARIABLE);
				}
				break;
			case PAREN_OPEN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 235;
				Match(PAREN_OPEN);
				State = 236;
				term();
				State = 237;
				Match(PAREN_CLOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LparseParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LparseParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(LparseParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LparseParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(LparseParser.MOD, 0); }
		public ArithopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.EnterArithop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILparseListener typedListener = listener as ILparseListener;
			if (typedListener != null) typedListener.ExitArithop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILparseVisitor<TResult> typedVisitor = visitor as ILparseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithopContext arithop() {
		ArithopContext _localctx = new ArithopContext(Context, State);
		EnterRule(_localctx, 54, RULE_arithop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 983048L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,34,244,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,0,3,
		0,59,8,0,1,0,3,0,62,8,0,1,1,1,1,5,1,66,8,1,10,1,12,1,69,9,1,1,2,1,2,1,
		2,5,2,74,8,2,10,2,12,2,77,9,2,1,2,1,2,1,3,1,3,3,3,83,8,3,1,3,1,3,1,3,3,
		3,88,8,3,1,3,3,3,91,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,100,8,3,1,4,1,
		4,5,4,104,8,4,10,4,12,4,107,9,4,1,5,1,5,5,5,111,8,5,10,5,12,5,114,9,5,
		1,6,1,6,3,6,118,8,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,5,8,128,8,8,10,8,12,
		8,131,9,8,1,9,1,9,1,9,3,9,136,8,9,1,10,1,10,1,10,5,10,141,8,10,10,10,12,
		10,144,9,10,1,11,1,11,1,12,1,12,1,13,1,13,3,13,152,8,13,1,13,1,13,1,14,
		1,14,1,14,5,14,159,8,14,10,14,12,14,162,9,14,1,15,1,15,1,16,1,16,3,16,
		168,8,16,1,16,1,16,3,16,172,8,16,1,17,3,17,175,8,17,1,17,1,17,1,17,3,17,
		180,8,17,1,17,3,17,183,8,17,1,18,3,18,186,8,18,1,18,1,18,1,18,1,18,1,18,
		1,19,1,19,1,19,1,19,1,20,3,20,198,8,20,1,20,1,20,1,21,1,21,1,21,1,21,1,
		22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,5,25,219,
		8,25,10,25,12,25,222,9,25,1,26,1,26,1,26,1,26,1,26,3,26,229,8,26,1,26,
		3,26,232,8,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,240,8,26,1,27,1,27,1,
		27,0,0,28,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,0,3,2,0,4,4,6,6,1,0,26,32,2,0,3,3,16,19,247,0,61,1,0,
		0,0,2,63,1,0,0,0,4,70,1,0,0,0,6,99,1,0,0,0,8,101,1,0,0,0,10,108,1,0,0,
		0,12,117,1,0,0,0,14,119,1,0,0,0,16,124,1,0,0,0,18,135,1,0,0,0,20,137,1,
		0,0,0,22,145,1,0,0,0,24,147,1,0,0,0,26,149,1,0,0,0,28,155,1,0,0,0,30,163,
		1,0,0,0,32,171,1,0,0,0,34,174,1,0,0,0,36,185,1,0,0,0,38,192,1,0,0,0,40,
		197,1,0,0,0,42,201,1,0,0,0,44,205,1,0,0,0,46,211,1,0,0,0,48,213,1,0,0,
		0,50,215,1,0,0,0,52,239,1,0,0,0,54,241,1,0,0,0,56,58,3,2,1,0,57,59,3,4,
		2,0,58,57,1,0,0,0,58,59,1,0,0,0,59,62,1,0,0,0,60,62,3,4,2,0,61,56,1,0,
		0,0,61,60,1,0,0,0,62,1,1,0,0,0,63,67,3,6,3,0,64,66,3,6,3,0,65,64,1,0,0,
		0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,3,1,0,0,0,69,67,1,0,0,0,
		70,75,3,20,10,0,71,72,5,14,0,0,72,74,3,20,10,0,73,71,1,0,0,0,74,77,1,0,
		0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,75,1,0,0,0,78,79,5,11,
		0,0,79,5,1,0,0,0,80,82,5,15,0,0,81,83,3,16,8,0,82,81,1,0,0,0,82,83,1,0,
		0,0,83,84,1,0,0,0,84,100,5,7,0,0,85,87,3,18,9,0,86,88,5,15,0,0,87,86,1,
		0,0,0,87,88,1,0,0,0,88,90,1,0,0,0,89,91,3,16,8,0,90,89,1,0,0,0,90,91,1,
		0,0,0,91,92,1,0,0,0,92,93,5,7,0,0,93,100,1,0,0,0,94,95,3,18,9,0,95,96,
		5,12,0,0,96,97,3,10,5,0,97,98,5,7,0,0,98,100,1,0,0,0,99,80,1,0,0,0,99,
		85,1,0,0,0,99,94,1,0,0,0,100,7,1,0,0,0,101,105,5,5,0,0,102,104,5,5,0,0,
		103,102,1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,9,
		1,0,0,0,107,105,1,0,0,0,108,112,3,12,6,0,109,111,3,12,6,0,110,109,1,0,
		0,0,111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,11,1,0,0,0,114,
		112,1,0,0,0,115,118,3,8,4,0,116,118,3,14,7,0,117,115,1,0,0,0,117,116,1,
		0,0,0,118,13,1,0,0,0,119,120,5,9,0,0,120,121,5,20,0,0,121,122,5,6,0,0,
		122,123,5,21,0,0,123,15,1,0,0,0,124,129,3,20,10,0,125,126,5,14,0,0,126,
		128,3,20,10,0,127,125,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,
		1,0,0,0,130,17,1,0,0,0,131,129,1,0,0,0,132,136,3,22,11,0,133,136,3,26,
		13,0,134,136,3,24,12,0,135,132,1,0,0,0,135,133,1,0,0,0,135,134,1,0,0,0,
		136,19,1,0,0,0,137,142,3,32,16,0,138,139,5,10,0,0,139,141,3,32,16,0,140,
		138,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,21,1,0,
		0,0,144,142,1,0,0,0,145,146,3,34,17,0,146,23,1,0,0,0,147,148,3,36,18,0,
		148,25,1,0,0,0,149,151,5,24,0,0,150,152,3,28,14,0,151,150,1,0,0,0,151,
		152,1,0,0,0,152,153,1,0,0,0,153,154,5,25,0,0,154,27,1,0,0,0,155,160,3,
		30,15,0,156,157,5,14,0,0,157,159,3,30,15,0,158,156,1,0,0,0,159,162,1,0,
		0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,29,1,0,0,0,162,160,1,0,0,0,163,
		164,3,34,17,0,164,31,1,0,0,0,165,172,3,44,22,0,166,168,5,1,0,0,167,166,
		1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,172,3,34,17,0,170,172,3,42,
		21,0,171,165,1,0,0,0,171,167,1,0,0,0,171,170,1,0,0,0,172,33,1,0,0,0,173,
		175,5,17,0,0,174,173,1,0,0,0,174,175,1,0,0,0,175,176,1,0,0,0,176,182,5,
		5,0,0,177,179,5,20,0,0,178,180,3,50,25,0,179,178,1,0,0,0,179,180,1,0,0,
		0,180,181,1,0,0,0,181,183,5,21,0,0,182,177,1,0,0,0,182,183,1,0,0,0,183,
		35,1,0,0,0,184,186,5,17,0,0,185,184,1,0,0,0,185,186,1,0,0,0,186,187,1,
		0,0,0,187,188,5,5,0,0,188,189,5,20,0,0,189,190,3,38,19,0,190,191,5,21,
		0,0,191,37,1,0,0,0,192,193,3,40,20,0,193,194,5,8,0,0,194,195,3,40,20,0,
		195,39,1,0,0,0,196,198,5,17,0,0,197,196,1,0,0,0,197,198,1,0,0,0,198,199,
		1,0,0,0,199,200,5,4,0,0,200,41,1,0,0,0,201,202,3,52,26,0,202,203,3,48,
		24,0,203,204,3,52,26,0,204,43,1,0,0,0,205,206,5,6,0,0,206,207,5,2,0,0,
		207,208,3,46,23,0,208,209,3,54,27,0,209,210,3,46,23,0,210,45,1,0,0,0,211,
		212,7,0,0,0,212,47,1,0,0,0,213,214,7,1,0,0,214,49,1,0,0,0,215,220,3,52,
		26,0,216,217,5,10,0,0,217,219,3,52,26,0,218,216,1,0,0,0,219,222,1,0,0,
		0,220,218,1,0,0,0,220,221,1,0,0,0,221,51,1,0,0,0,222,220,1,0,0,0,223,228,
		5,5,0,0,224,225,5,20,0,0,225,226,3,50,25,0,226,227,5,21,0,0,227,229,1,
		0,0,0,228,224,1,0,0,0,228,229,1,0,0,0,229,240,1,0,0,0,230,232,5,17,0,0,
		231,230,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,233,240,5,4,0,0,234,240,
		5,6,0,0,235,236,5,20,0,0,236,237,3,52,26,0,237,238,5,21,0,0,238,240,1,
		0,0,0,239,223,1,0,0,0,239,231,1,0,0,0,239,234,1,0,0,0,239,235,1,0,0,0,
		240,53,1,0,0,0,241,242,7,2,0,0,242,55,1,0,0,0,27,58,61,67,75,82,87,90,
		99,105,112,117,129,135,142,151,160,167,171,174,179,182,185,197,220,228,
		231,239
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
