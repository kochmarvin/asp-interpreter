//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Lparse.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class LparseLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NAF=1, NUMBER=2, ID=3, VARIABLE=4, DOT=5, DOTDOT=6, COMMA=7, QUERY_MARK=8, 
		COLON=9, SEMICOLON=10, CONS=11, PLUS=12, MINUS=13, TIMES=14, DIV=15, PAREN_OPEN=16, 
		PAREN_CLOSE=17, SQUARE_OPEN=18, SQUARE_CLOSE=19, CURLY_OPEN=20, CURLY_CLOSE=21, 
		EQUAL=22, UNEQUAL=23, LESS=24, GREATER=25, LESS_OR_EQ=26, GREATER_OR_EQ=27, 
		LINE_COMMENT=28, WS=29;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NAF", "NUMBER", "ID", "VARIABLE", "DOT", "DOTDOT", "COMMA", "QUERY_MARK", 
		"COLON", "SEMICOLON", "CONS", "PLUS", "MINUS", "TIMES", "DIV", "PAREN_OPEN", 
		"PAREN_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", 
		"EQUAL", "UNEQUAL", "LESS", "GREATER", "LESS_OR_EQ", "GREATER_OR_EQ", 
		"LINE_COMMENT", "WS"
	};


	public LparseLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LparseLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'not'", null, null, null, "'.'", "'..'", "','", "'?'", "':'", "';'", 
		"':-'", "'+'", "'-'", "'*'", "'/'", "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "'=='", null, "'<'", "'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NAF", "NUMBER", "ID", "VARIABLE", "DOT", "DOTDOT", "COMMA", "QUERY_MARK", 
		"COLON", "SEMICOLON", "CONS", "PLUS", "MINUS", "TIMES", "DIV", "PAREN_OPEN", 
		"PAREN_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", 
		"EQUAL", "UNEQUAL", "LESS", "GREATER", "LESS_OR_EQ", "GREATER_OR_EQ", 
		"LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lparse.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LparseLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,29,158,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,1,0,1,0,1,0,1,0,1,1,1,1,1,1,5,1,67,8,1,10,1,12,1,70,9,1,3,1,72,8,
		1,1,2,1,2,5,2,76,8,2,10,2,12,2,79,9,2,1,3,1,3,5,3,83,8,3,10,3,12,3,86,
		9,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,
		1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,
		1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,3,22,
		131,8,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,5,
		27,145,8,27,10,27,12,27,148,9,27,1,27,1,27,1,28,4,28,153,8,28,11,28,12,
		28,154,1,28,1,28,0,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
		45,23,47,24,49,25,51,26,53,27,55,28,57,29,1,0,8,1,0,49,57,1,0,48,57,1,
		0,97,122,3,0,65,90,95,95,97,122,1,0,65,90,4,0,48,57,65,90,95,95,97,122,
		2,0,10,10,13,13,3,0,9,10,13,13,32,32,164,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
		0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
		0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,
		0,3,71,1,0,0,0,5,73,1,0,0,0,7,80,1,0,0,0,9,87,1,0,0,0,11,89,1,0,0,0,13,
		92,1,0,0,0,15,94,1,0,0,0,17,96,1,0,0,0,19,98,1,0,0,0,21,100,1,0,0,0,23,
		103,1,0,0,0,25,105,1,0,0,0,27,107,1,0,0,0,29,109,1,0,0,0,31,111,1,0,0,
		0,33,113,1,0,0,0,35,115,1,0,0,0,37,117,1,0,0,0,39,119,1,0,0,0,41,121,1,
		0,0,0,43,123,1,0,0,0,45,130,1,0,0,0,47,132,1,0,0,0,49,134,1,0,0,0,51,136,
		1,0,0,0,53,139,1,0,0,0,55,142,1,0,0,0,57,152,1,0,0,0,59,60,5,110,0,0,60,
		61,5,111,0,0,61,62,5,116,0,0,62,2,1,0,0,0,63,72,5,48,0,0,64,68,7,0,0,0,
		65,67,7,1,0,0,66,65,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,
		69,72,1,0,0,0,70,68,1,0,0,0,71,63,1,0,0,0,71,64,1,0,0,0,72,4,1,0,0,0,73,
		77,7,2,0,0,74,76,7,3,0,0,75,74,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,
		78,1,0,0,0,78,6,1,0,0,0,79,77,1,0,0,0,80,84,7,4,0,0,81,83,7,5,0,0,82,81,
		1,0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,8,1,0,0,0,86,84,1,
		0,0,0,87,88,5,46,0,0,88,10,1,0,0,0,89,90,5,46,0,0,90,91,5,46,0,0,91,12,
		1,0,0,0,92,93,5,44,0,0,93,14,1,0,0,0,94,95,5,63,0,0,95,16,1,0,0,0,96,97,
		5,58,0,0,97,18,1,0,0,0,98,99,5,59,0,0,99,20,1,0,0,0,100,101,5,58,0,0,101,
		102,5,45,0,0,102,22,1,0,0,0,103,104,5,43,0,0,104,24,1,0,0,0,105,106,5,
		45,0,0,106,26,1,0,0,0,107,108,5,42,0,0,108,28,1,0,0,0,109,110,5,47,0,0,
		110,30,1,0,0,0,111,112,5,40,0,0,112,32,1,0,0,0,113,114,5,41,0,0,114,34,
		1,0,0,0,115,116,5,91,0,0,116,36,1,0,0,0,117,118,5,93,0,0,118,38,1,0,0,
		0,119,120,5,123,0,0,120,40,1,0,0,0,121,122,5,125,0,0,122,42,1,0,0,0,123,
		124,5,61,0,0,124,125,5,61,0,0,125,44,1,0,0,0,126,127,5,60,0,0,127,131,
		5,62,0,0,128,129,5,33,0,0,129,131,5,61,0,0,130,126,1,0,0,0,130,128,1,0,
		0,0,131,46,1,0,0,0,132,133,5,60,0,0,133,48,1,0,0,0,134,135,5,62,0,0,135,
		50,1,0,0,0,136,137,5,60,0,0,137,138,5,61,0,0,138,52,1,0,0,0,139,140,5,
		62,0,0,140,141,5,61,0,0,141,54,1,0,0,0,142,146,5,37,0,0,143,145,8,6,0,
		0,144,143,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,
		149,1,0,0,0,148,146,1,0,0,0,149,150,6,27,0,0,150,56,1,0,0,0,151,153,7,
		7,0,0,152,151,1,0,0,0,153,154,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,
		155,156,1,0,0,0,156,157,6,28,0,0,157,58,1,0,0,0,8,0,68,71,77,84,130,146,
		154,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
