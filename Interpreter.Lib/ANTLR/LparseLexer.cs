//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Lparse.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class LparseLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NAF=1, IS=2, NUMBER=3, ID=4, VARIABLE=5, DOT=6, DOTDOT=7, COMMA=8, QUERY_MARK=9, 
		COLON=10, SEMICOLON=11, CONS=12, PLUS=13, MINUS=14, TIMES=15, DIV=16, 
		PAREN_OPEN=17, PAREN_CLOSE=18, SQUARE_OPEN=19, SQUARE_CLOSE=20, CURLY_OPEN=21, 
		CURLY_CLOSE=22, UNIFICATION=23, EQUAL=24, UNEQUAL=25, LESS=26, GREATER=27, 
		LESS_OR_EQ=28, GREATER_OR_EQ=29, LINE_COMMENT=30, WS=31;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NAF", "IS", "NUMBER", "ID", "VARIABLE", "DOT", "DOTDOT", "COMMA", "QUERY_MARK", 
		"COLON", "SEMICOLON", "CONS", "PLUS", "MINUS", "TIMES", "DIV", "PAREN_OPEN", 
		"PAREN_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", 
		"UNIFICATION", "EQUAL", "UNEQUAL", "LESS", "GREATER", "LESS_OR_EQ", "GREATER_OR_EQ", 
		"LINE_COMMENT", "WS"
	};


	public LparseLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LparseLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'not'", "'is'", null, null, null, "'.'", "'..'", "','", "'?'", 
		"':'", "';'", "':-'", "'+'", "'-'", "'*'", "'/'", "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "'='", "'=='", null, "'<'", "'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NAF", "IS", "NUMBER", "ID", "VARIABLE", "DOT", "DOTDOT", "COMMA", 
		"QUERY_MARK", "COLON", "SEMICOLON", "CONS", "PLUS", "MINUS", "TIMES", 
		"DIV", "PAREN_OPEN", "PAREN_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE", "CURLY_OPEN", 
		"CURLY_CLOSE", "UNIFICATION", "EQUAL", "UNEQUAL", "LESS", "GREATER", "LESS_OR_EQ", 
		"GREATER_OR_EQ", "LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lparse.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LparseLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,31,167,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,5,2,74,
		8,2,10,2,12,2,77,9,2,3,2,79,8,2,1,3,1,3,5,3,83,8,3,10,3,12,3,86,9,3,1,
		4,1,4,5,4,90,8,4,10,4,12,4,93,9,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,
		1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,
		15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,
		22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,3,24,140,8,24,1,25,1,25,1,26,1,26,
		1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,5,29,154,8,29,10,29,12,29,157,
		9,29,1,29,1,29,1,30,4,30,162,8,30,11,30,12,30,163,1,30,1,30,0,0,31,1,1,
		3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
		31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
		55,28,57,29,59,30,61,31,1,0,8,1,0,49,57,1,0,48,57,1,0,97,122,3,0,65,90,
		95,95,97,122,1,0,65,90,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,
		0,9,10,13,13,32,32,173,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
		0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
		0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
		0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
		1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
		0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,1,63,
		1,0,0,0,3,67,1,0,0,0,5,78,1,0,0,0,7,80,1,0,0,0,9,87,1,0,0,0,11,94,1,0,
		0,0,13,96,1,0,0,0,15,99,1,0,0,0,17,101,1,0,0,0,19,103,1,0,0,0,21,105,1,
		0,0,0,23,107,1,0,0,0,25,110,1,0,0,0,27,112,1,0,0,0,29,114,1,0,0,0,31,116,
		1,0,0,0,33,118,1,0,0,0,35,120,1,0,0,0,37,122,1,0,0,0,39,124,1,0,0,0,41,
		126,1,0,0,0,43,128,1,0,0,0,45,130,1,0,0,0,47,132,1,0,0,0,49,139,1,0,0,
		0,51,141,1,0,0,0,53,143,1,0,0,0,55,145,1,0,0,0,57,148,1,0,0,0,59,151,1,
		0,0,0,61,161,1,0,0,0,63,64,5,110,0,0,64,65,5,111,0,0,65,66,5,116,0,0,66,
		2,1,0,0,0,67,68,5,105,0,0,68,69,5,115,0,0,69,4,1,0,0,0,70,79,5,48,0,0,
		71,75,7,0,0,0,72,74,7,1,0,0,73,72,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,
		75,76,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,78,70,1,0,0,0,78,71,1,0,0,0,
		79,6,1,0,0,0,80,84,7,2,0,0,81,83,7,3,0,0,82,81,1,0,0,0,83,86,1,0,0,0,84,
		82,1,0,0,0,84,85,1,0,0,0,85,8,1,0,0,0,86,84,1,0,0,0,87,91,7,4,0,0,88,90,
		7,5,0,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,10,
		1,0,0,0,93,91,1,0,0,0,94,95,5,46,0,0,95,12,1,0,0,0,96,97,5,46,0,0,97,98,
		5,46,0,0,98,14,1,0,0,0,99,100,5,44,0,0,100,16,1,0,0,0,101,102,5,63,0,0,
		102,18,1,0,0,0,103,104,5,58,0,0,104,20,1,0,0,0,105,106,5,59,0,0,106,22,
		1,0,0,0,107,108,5,58,0,0,108,109,5,45,0,0,109,24,1,0,0,0,110,111,5,43,
		0,0,111,26,1,0,0,0,112,113,5,45,0,0,113,28,1,0,0,0,114,115,5,42,0,0,115,
		30,1,0,0,0,116,117,5,47,0,0,117,32,1,0,0,0,118,119,5,40,0,0,119,34,1,0,
		0,0,120,121,5,41,0,0,121,36,1,0,0,0,122,123,5,91,0,0,123,38,1,0,0,0,124,
		125,5,93,0,0,125,40,1,0,0,0,126,127,5,123,0,0,127,42,1,0,0,0,128,129,5,
		125,0,0,129,44,1,0,0,0,130,131,5,61,0,0,131,46,1,0,0,0,132,133,5,61,0,
		0,133,134,5,61,0,0,134,48,1,0,0,0,135,136,5,60,0,0,136,140,5,62,0,0,137,
		138,5,33,0,0,138,140,5,61,0,0,139,135,1,0,0,0,139,137,1,0,0,0,140,50,1,
		0,0,0,141,142,5,60,0,0,142,52,1,0,0,0,143,144,5,62,0,0,144,54,1,0,0,0,
		145,146,5,60,0,0,146,147,5,61,0,0,147,56,1,0,0,0,148,149,5,62,0,0,149,
		150,5,61,0,0,150,58,1,0,0,0,151,155,5,37,0,0,152,154,8,6,0,0,153,152,1,
		0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,158,1,0,0,0,
		157,155,1,0,0,0,158,159,6,29,0,0,159,60,1,0,0,0,160,162,7,7,0,0,161,160,
		1,0,0,0,162,163,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,165,1,0,0,
		0,165,166,6,30,0,0,166,62,1,0,0,0,8,0,75,78,84,91,139,155,163,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
